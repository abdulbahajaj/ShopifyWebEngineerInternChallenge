{"version":3,"sources":["logo.svg","APPManager.js","components/results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ACTIONS","store","createStore","state","action","type","id","data","map","item","faved","APPManager","setData","dispatch","search","keyword","getState","result","toLowerCase","split","key","word","keywords","indexOf","push","toggleFav","subscribe","func","axios","method","url","then","response","Result","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fav","bind","assertThisInitialized","content","body","Parser","console","log","isFaved","react_default","a","createElement","className","onClick","title","dangerouslySetInnerHTML","__html","Component","Results","display","length","notFaved","results_Result","App","query","results","submit","handleInputChange","update","forceUpdate","event","value","target","setState","preventDefault","onSubmit","onEnter","onChange","components_results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5e7f9a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\nimport { createStore } from 'redux'\n\nconst ACTIONS = {\n\tSET_DATA: \"setData\",\n\tTOGGLE_FAV: \"fav\"\n}\n\nconst searchReducer = function(state, action){\n\tswitch (action.type) {\n\t\tcase ACTIONS.SET_DATA:\n\t\t\tvar id = 0;\n\t\t\tstate.data = action.data\n\t\t\tstate.data.map(function(item){\n\t\t\t\titem.faved = false;\n\t\t\t\titem.id = id;\n\t\t\t\tid += 1;\n\t\t\t})\n\t\t\tbreak\n\t\tcase ACTIONS.TOGGLE_FAV:\n\t\t\tstate.data[action.id].faved = !state.data[action.id].faved;\n\t\t\tbreak;\n\t}\n\treturn state\n}\n\nconst store = createStore(searchReducer,{data: []})\n\nconst APPManager = {\n\tsetData: function(data){\n\t\tvar action = {};\n\t\taction.type = ACTIONS.SET_DATA;\n\t\taction.data = data;\n\t\tstore.dispatch(action)\n\t},\n\tsearch: function(keyword){\n\t\tvar state = store.getState();\n\t\tvar data = state.data;\n\n\t\tvar result = [];\n\n\t\tkeyword = keyword.toLowerCase()\n\t\tkeyword = keyword.split(\" \")\n\t\tdata.map(function(item){\n\t\t\tfor(var key in keyword){\n\t\t\t\tvar word = keyword[key];\n\t\t\t\tif(item.keywords.indexOf(word) != -1){\n\t\t\t\t\tresult.push(item)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn result\n\t},\n\ttoggleFav: function(id){\n\t\tvar action = {};\n\t\taction.type = ACTIONS.TOGGLE_FAV;\n\t\taction.id = id;\n\t\tstore.dispatch(action);\n\t},\n\tsubscribe: function(func){\n\t\tstore.subscribe(func);\n\t}\n}\n\naxios({\n\tmethod:'get',\n\turl:'https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000',\n}).then(function(response) {\n\tAPPManager.setData(response.data)\n});\n\n\n\nexport default APPManager;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport APPManager from '../APPManager.js';\nimport Parser from 'html-react-parser';\n\nclass Result extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.fav = this.fav.bind(this);\n\t}\n\tfav(){\n\t\tAPPManager.toggleFav(this.props.item.id);\n\t}\n\trender(){\n\t\tvar content = this.props.item.body;\n\t\tcontent = Parser(content)\n\t\tconsole.log(this.props.item.faved)\n\n\t\tvar isFaved = \"\"\n\t\tif(this.props.item.faved){\n\t\t\tisFaved += \"fav\";\n\t\t}\n\n\n\t\treturn (\n\t\t\t<div className=\"Result\">\n\t\t\t\t<div className='title'>\n\t\t\t\t\t<i onClick={this.fav} className={\"fas fa-star star \"+isFaved}></i>\n\t\t\t\t\t{this.props.item.title}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"description\">\n\t\t\t\t\t<div dangerouslySetInnerHTML={{__html:content}}></div>\n\t\t\t\t</div>\n\t\t\t</div> \n\t\t)\n\t}\n}\n\n\n\nclass Results extends Component {\n    render() {\n    \tif(this.props.display.length == 0){\n    \t\treturn (<div>No results are available.</div>)\n    \t}\n    \tvar faved = [];\n    \tvar notFaved = [];\n    \tthis.props.display.map(function(item){\n    \t\tif(item.faved){\n    \t\t\tfaved.push(<Result key={item.id} item={item}/>);\n    \t\t}else{\n    \t\t\tnotFaved.push(<Result key={item.id} item={item}/>)\n    \t\t}\n    \t})\n    \treturn (\n            <div className='Results'>\n            \t{notFaved}\n                <div className='favs'>\n                \t<div className=\"sectionTitle\">Favourites</div>\n                \t{faved}\n                </div>\n            </div>\n    \t)\n    }\n}\n\nexport default Results;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Results from './components/results.js'\nimport APPManager from './APPManager.js'\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.query = this.query.bind(this);\n        this.state = {results: [], keyword: \"\"}\n        this.submit = this.submit.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.update = this.update.bind(this);\n        \n        APPManager.subscribe(this.update);\n\n    }\n    update(){\n        this.forceUpdate();\n        console.log(\"updating\")\n    }\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        this.state.keyword = value\n        if(value == \"\"){\n            this.setState({results: []})\n        }\n    }\n    query(event){\n        var results = APPManager.search(this.state.keyword)\n        this.setState({results: results})\n    }\n    submit(event){\n        event.preventDefault();\n        this.query();\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"header\">\n                    Toronto Waste Lookup\n                </div>\n                <div className=\"body\">\n                    <div className=\"searchWrapper\">\n                        <form onSubmit={this.submit}>\n                            <input type=\"text\" className=\"text\" onEnter={this.onEnter} onChange={this.handleInputChange} />\n                            <i className=\"searchButton fas fa-search\" onClick={this.query}></i>\n                        </form>\n                    </div>\n                    <Results display={this.state.results}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}